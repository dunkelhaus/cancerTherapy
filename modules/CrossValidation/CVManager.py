#CVManager.py
"""
    ** Retrieve CSV file from RDBManager.
    ** Fold the csv into 10 datasets using FoldManager.py
    ** 9 folds: Training
    ** 1 fold: Testing
    ** Each fold is stored into a csv file and also saved into a DLL
    ** Multiprocessing used to asynchronously cross validate and send data via DataDispatcher

    - path: this is where you will store the csv generated by GETCSV()
    - folds: the number of folds you want to fold csv into
    - row_label: the label which GETCSV will give each rows
    - column_label: the label which GETCSV will give each column_label
    - num_rows: number of rows in csv generated by GETCSV
    - num_columns: number of columns in csv generated by GETCSV
"""
import sys
sys.path.append('../')
sys.dont_write_bytecode = True

from DLL import _DLL
from FoldManager import generateFolds
from RawDB.RDBManager import GETCSV
from crossValidation import validation
from DataDispatcher.DDManager import DispatchData

from multiprocessing import Process, Queue

def CrossValidate(path):
    # Eventually will change path to fm_mutations file given by Quon
    #path = '../../../data/test.csv'
    folds = 10
    row_label = "CANCERS"
    column_labels = "FEATURES"
    num_rows = 10
    num_columns = 7

    # Commented out for now.
    #GETCSV(row_label, column_labels, num_rows, num_columns, path)

    # List will hold 10 nodes where the head is Testing and the other 9 nodes are Training data
    List = generateFolds(path, folds)

    #initialize the queues which are populated by crossValidate() and used by DispatchData()
    DDqTesting = Queue()
    DDqTraining = Queue()

    #Two processes: one to cross validate and another to begin dispatching data as soon
    #as there is something in the Queue to dispatch
    crossValidate = Process(target=validation , args=(List,folds,DDqTesting,DDqTraining,))
    dispatch = Process(target=DispatchData, args=(DDqTesting,DDqTraining,))
    crossValidate.start()
    dispatch.start()


#CrossValidate()
